install.packages("C:/Users/Ricardo/Downloads/omnetpp_0.2-1.tar.gz", repos = NULL, type = "source")
require(omnetpp)
library("omnetpp", lib.loc="~/R/win-library/3.4")
require(omnetpp)
library("omnetpp", lib.loc="~/R/win-library/3.4")
library("omnetpp", lib.loc="~/R/win-library/3.4")
install.packages("omnetpp")
require(omnetpp)
setwd("UFMG/Matérias/FECC/Lista 7/")
tab<-read.csv("tab1.csv")
tab
tab<-read.csv("tab1.csv",sep = ";")
tab
sigma<-apply(tab, 2, sd)
mu<-appl
mu<-apply(tab, 2, mean)
cov(tab$Wind,tab$radiation)
cor(tab$Wind,tab$Wind,method = "pearson")
cor(tab$Wind,tab$radiation,method = "pearson")
Sigma<-matrix(0,7,7)
for(i in 1:ncol(tab)){
for(j in 1:ncol(tab)){
if(i==j){
Sigma[i,j]<-sigma[i]^2
}else{
Sigma[i,j]<-cor(tab[,i],tab[,j])*sigma[i]*sigma[j]
}
}
}
Sigma
Sigma^(-1)
tab[1,]-mu
t(tab[1,]-mu)
t(tab[1,]-mu)%*%Sigma^(-1)
t(t(tab[1,]-mu))
t(as.numeric(tab[1,]-mu))
as.numeric(tab[1,]-mu)
t(as.numeric(tab[1,]-mu))
t(t(as.numeric(tab[1,]-mu)))
t(t(as.numeric(tab[1,]-mu)))*Sigma^(-1)
t(t(as.numeric(tab[1,]-mu)))%*%Sigma^(-1)
tab<-read.csv("tab1.csv",sep = ";")
tab
tab<-read.csv("tab1.csv",sep = ",")
tab
tab<-read.csv("tab1.csv",sep = ";")
TAB
tab
tab<-read.csv("tab1.csv",sep = ",")
tab
cor(tab$Wind,tab$radiation,method = "pearson")
for(i in 1:ncol(tab)){
for(j in 1:ncol(tab)){
if(i==j){
Sigma[i,j]<-sigma[i]^2
}else{
Sigma[i,j]<-cor(tab[,i],tab[,j])*sigma[i]*sigma[j]
}
}
}
Sigma1=Sigma^(-1)
Sigma1
tab[1,]
nrow(tab[1,])
ncol(tab[1,])
nrow(t(tab[1,]))
nrow(t(tab[1,])-mu)
t(tab[1,])-mu
(t(tab[1,])-mu)%*%Sigma1
as.vector(as.numeric(t(tab[1,])-mu))
as.vector(t(tab[1,])-mu)
t(as.vector(tab[1,]-mu))
t(as.vector(tab[1,]-mu))%*%Sigma1
mu
as.vector(mu)
vecmu=as.vector(mu)
vecmu
as.vector(tab[1,])-mu
as.vector(tab[1,]-mu)
as.numeric(tab[1,]-mu)
vect=as.numeric(tab[1,]-mu)
vect
t(vect)
t(t(vect))
t(t(vect))%*%Sigma1
Sigma1
nrow(t(t(vect)))
as.numeric(t(t(vect)))%*%Sigma1
as.numeric(t(t(vect)))
as.numeric(vect)
as.numeric(t(vect)
)
as.numeric(t(vect))
as.numeric(t(t(vect)))
vect
t(vect)
qchisq(0.95,6)
qchisq(0.95,7)
qchisq(0.95,5)
t(tab)
t(tab)[,1]-mu
d2 = mahalanobis(tab,center=mu,cov=Sigma)
d2
Sigma
sort(d2)
hist(d2)
qchisq(0.95,7)
(sort(d2)<=qchisq(0.95,7))
sum(sort(d2)<=qchisq(0.95,7))
sum(sort(d2)<=qchisq(0.95,7))/42
(sum(sort(d2)<=qchisq(0.95,7))/42)*100
cov(tab)
Sigma
est_dist = function(table){
cov_matrix=cov(table)
mu=apply(table,2,mean)
}
est_dist = function(table){
cov_matrix=cov(table)
mu=apply(table,2,mean)
return(mahalanobis(table,center = mu,cov = cov_matrix))
}
d2=est_dist(tab)
d2
hist(d2,xlab="Distâncias",ylab = "Frequência",main = "|Histograma das distâncias estatísticas")
lines(density(d2))
lines(frequency(d2))
hist(d2,xlab="Distâncias",ylab = "Frequência",main = "|Histograma das distâncias estatísticas",probability = TRUE)
lines(density(d2))
hist(d2,xlab="Distâncias",ylab = "Densidade",main = "|Histograma das distâncias estatísticas",probability = TRUE)
lines(density(d2))
hist(d2,xlab="Distâncias",ylab = "Densidade",main = "Histograma das distâncias estatísticas",probability = TRUE)
lines(density(d2))
qchisq(0.95,7)
sum(sort(d2)<=qchisq(0.95,7))/42
sum(d2<=qchisq(0.95,7))/42
A=matrix(c(9,-2,-2,6),2,2)
A
eigen(A)
eigen(A,symmetric = FALSE)
eig=eigen(A,symmetric = FALSE)
eig
eig$vectors[,1]
A%*%eig$vectors[,1]
A%*%t(eig$vectors[,1])
eig$vectors^(-1)
A^(-1)
A*A^(-1)
eigen(A^(-1))
eigen(A^(-1),symmetric = FALSE)
A%*%A^(-1)
A*A^(-1)
I=matrix(c(1,0,0,1),2,2)
I/A
a=I/A
A*a
a
eigen(a,symmetric = FALSE)
a*A
A=matrix(c(4,-sqrt(2),-sqrt(2),3))
A=matrix(c(4,-sqrt(2),-sqrt(2),3)2,2)
A=matrix(c(4,-sqrt(2),-sqrt(2),3),2,2)
eigen(A)
eigen(A,symmetric = FALSE)
